package com.fabrika.s5takip

import android.app.Activity
import android.content.Intent
import android.content.SharedPreferences
import android.net.Uri
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.fabrika.s5takip.databinding.ActivityAddSolutionBinding
import com.github.dhaval2404.imagepicker.ImagePicker

/**
 * √á√∂z√ºm ekleme ekranƒ±
 * Kullanƒ±cƒ±lar problemlere √ß√∂z√ºm √∂nerileri ekleyebilir
 */
class AddSolutionActivity : AppCompatActivity() {

    private lateinit var binding: ActivityAddSolutionBinding
    private lateinit var databaseHelper: DatabaseHelper
    private lateinit var photoManager: PhotoManager
    private lateinit var sharedPreferences: SharedPreferences

    private var currentUser: User? = null
    private var problem: Problem? = null
    private var selectedImageUri: Uri? = null
    private var isImplemented = false // √á√∂z√ºm uygulandƒ± mƒ±?

    companion object {
        const val EXTRA_PROBLEM_ID = "problem_id"
    }

    // Fotoƒüraf se√ßme i√ßin launcher
    private val imagePickerLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            selectedImageUri = result.data?.data
            if (selectedImageUri != null) {
                // Fotoƒürafƒ± g√∂ster
                binding.ivSolutionPhoto.setImageURI(selectedImageUri)
                binding.ivSolutionPhoto.alpha = 1.0f
                binding.tvSolutionPhotoInstruction.text = "‚úì √á√∂z√ºm fotoƒürafƒ± se√ßildi"

                // Kaydet butonunu kontrol et
                checkFormValidity()
            }
        } else if (result.resultCode == ImagePicker.RESULT_ERROR) {
            Toast.makeText(this, "Fotoƒüraf se√ßilirken hata: ${ImagePicker.getError(result.data)}", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAddSolutionBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Ba≈ülangƒ±√ß ayarlarƒ±
        initializeComponents()
        loadCurrentUser()
        loadProblem()
        setupClickListeners()
        setupTextWatchers()

        // Ba≈ülƒ±k √ßubuƒüunu ayarla
        supportActionBar?.title = "√á√∂z√ºm Ekle"
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
    }

    /**
     * Bile≈üenleri ba≈ülat
     */
    private fun initializeComponents() {
        databaseHelper = DatabaseHelper(this)
        photoManager = PhotoManager(this)
        sharedPreferences = getSharedPreferences("s5_takip_prefs", MODE_PRIVATE)
    }

    /**
     * Mevcut kullanƒ±cƒ±yƒ± y√ºkle
     */
    private fun loadCurrentUser() {
        val userId = sharedPreferences.getString("current_user_id", null)
        if (userId != null) {
            currentUser = databaseHelper.getUserById(userId)
        }

        if (currentUser == null) {
            Toast.makeText(this, "Kullanƒ±cƒ± bilgisi bulunamadƒ±", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // Debug: Kullanƒ±cƒ± bilgisi
        println("DEBUG: Mevcut kullanƒ±cƒ±: ${currentUser?.name} (${currentUser?.role})")
    }

    /**
     * Problem bilgilerini y√ºkle
     */
    private fun loadProblem() {
        val problemId = intent.getStringExtra(EXTRA_PROBLEM_ID)
        if (problemId == null) {
            Toast.makeText(this, "Problem bilgisi bulunamadƒ±", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // Debug: Problem ID
        println("DEBUG: Y√ºklenen Problem ID: $problemId")

        // Problem'i veritabanƒ±ndan bul
        val problems = databaseHelper.getProblemsForDate(getCurrentDate())
        problem = problems.find { it.id == problemId }

        if (problem == null) {
            Toast.makeText(this, "Problem bulunamadƒ±", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // Debug: Problem bilgisi
        println("DEBUG: Problem bulundu: ${problem?.description?.take(50)}...")

        // Problem bilgilerini ekranda g√∂ster
        binding.tvProblemDescription.text = problem!!.description
        binding.tvProblemLocation.text = "üìç ${problem!!.location}"
    }

    /**
     * Tƒ±klama olaylarƒ±nƒ± ayarla
     */
    private fun setupClickListeners() {
        // Fotoƒüraf √ßekme/se√ßme
        binding.llSolutionPhotoContainer.setOnClickListener {
            openImagePicker()
        }

        // √á√∂z√ºm durumu se√ßimi
        binding.rgSolutionStatus.setOnCheckedChangeListener { _, checkedId ->
            isImplemented = checkedId == R.id.rb_implemented

            // Debug: Durum se√ßimi
            println("DEBUG: √á√∂z√ºm durumu deƒüi≈üti: ${if (isImplemented) "Uygulandƒ±" else "√ñneri"}")
        }

        // ƒ∞ptal butonu
        binding.btnCancelSolution.setOnClickListener {
            finish()
        }

        // Kaydet butonu
        binding.btnSaveSolution.setOnClickListener {
            saveSolution()
        }
    }

    /**
     * Metin deƒüi≈üikliklerini izle
     */
    private fun setupTextWatchers() {
        binding.etSolutionDescription.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
            override fun afterTextChanged(s: Editable?) {
                checkFormValidity()
            }
        })
    }

    /**
     * Fotoƒüraf se√ßici/√ßekici a√ß
     */
    private fun openImagePicker() {
        ImagePicker.with(this)
            .crop()
            .compress(1024)
            .maxResultSize(1080, 1080)
            .createIntent { intent ->
                imagePickerLauncher.launch(intent)
            }
    }

    /**
     * Form ge√ßerliliƒüini kontrol et
     */
    private fun checkFormValidity() {
        val description = binding.etSolutionDescription.text.toString().trim()

        // En az a√ßƒ±klama olmasƒ± yeterli (fotoƒüraf opsiyonel)
        val isFormValid = description.isNotEmpty() && description.length >= 10

        binding.btnSaveSolution.isEnabled = isFormValid

        // Debug: Form durumu
        if (description.isNotEmpty()) {
            println("DEBUG: A√ßƒ±klama uzunluƒüu: ${description.length}, Ge√ßerli: $isFormValid")
        }
    }

    /**
     * √á√∂z√ºm√º kaydet
     */
    private fun saveSolution() {
        val description = binding.etSolutionDescription.text.toString().trim()

        // Form kontrol√º
        if (description.isEmpty() || description.length < 10) {
            Toast.makeText(this, "L√ºtfen en az 10 karakter √ß√∂z√ºm a√ßƒ±klamasƒ± yazƒ±n", Toast.LENGTH_SHORT).show()
            return
        }

        if (currentUser == null || problem == null) {
            Toast.makeText(this, "Eksik bilgi", Toast.LENGTH_SHORT).show()
            return
        }

        // Debug: Kaydetme ba≈ülangƒ±cƒ±
        println("DEBUG: √á√∂z√ºm kaydetme ba≈üladƒ±...")
        println("DEBUG: A√ßƒ±klama: ${description.take(50)}...")
        println("DEBUG: Fotoƒüraf var mƒ±: ${selectedImageUri != null}")
        println("DEBUG: Uygulama durumu: $isImplemented")

        // Kaydet butonunu deaktif et
        binding.btnSaveSolution.isEnabled = false
        binding.btnSaveSolution.text = "Kaydediliyor..."

        try {
            // √á√∂z√ºm objesi olu≈ütur
            val solution = Solution(
                problemId = problem!!.id,
                userId = currentUser!!.id,
                userName = currentUser!!.name,
                description = description,
                imagePath = "", // √ñnce bo≈ü, fotoƒüraf varsa g√ºncellenecek
                isVerified = false
            )

            // Debug: √á√∂z√ºm objesi
            println("DEBUG: √á√∂z√ºm objesi olu≈üturuldu - ID: ${solution.id}")

            var savedImagePath: String? = null

            // Fotoƒüraf varsa kaydet
            if (selectedImageUri != null) {
                println("DEBUG: Fotoƒüraf kaydediliyor...")
                savedImagePath = photoManager.saveSolutionPhoto(selectedImageUri!!, solution.id)
                println("DEBUG: Fotoƒüraf kaydedildi: $savedImagePath")
            }

            // √á√∂z√ºm√ºn fotoƒüraf yolunu g√ºncelle
            val updatedSolution = solution.copy(
                imagePath = savedImagePath ?: ""
            )

            // Debug: Final √ß√∂z√ºm objesi
            println("DEBUG: Final √ß√∂z√ºm - Problem ID: ${updatedSolution.problemId}")
            println("DEBUG: Final √ß√∂z√ºm - Kullanƒ±cƒ±: ${updatedSolution.userName}")

            // Veritabanƒ±na kaydet
            println("DEBUG: Veritabanƒ±na kaydediliyor...")
            val success = databaseHelper.insertSolution(updatedSolution)

            if (success) {
                // Debug: Ba≈üarƒ±lƒ± kayƒ±t
                println("DEBUG: ‚úÖ √á√∂z√ºm ba≈üarƒ±yla kaydedildi!")

                // Eƒüer √ß√∂z√ºm uygulandƒ±ysa, problem durumunu g√ºncelle
                if (isImplemented) {
                    println("DEBUG: Problem durumu g√ºncelleniyor...")
                    databaseHelper.updateProblemStatus(problem!!.id, ProblemStatus.RESOLVED)
                    println("DEBUG: Problem durumu RESOLVED olarak g√ºncellendi")

                    Toast.makeText(this, "√á√∂z√ºm kaydedildi ve problem √ß√∂z√ºld√º olarak i≈üaretlendi! ‚úì", Toast.LENGTH_LONG).show()
                } else {
                    Toast.makeText(this, "√á√∂z√ºm √∂nerisi ba≈üarƒ±yla kaydedildi! ‚úì", Toast.LENGTH_LONG).show()
                }

                // Debug: Kayƒ±t sonrasƒ± kontrol
                val checkSolutions = databaseHelper.getSolutionsForProblem(problem!!.id)
                println("DEBUG: Kayƒ±t sonrasƒ± bu problem i√ßin toplam √ß√∂z√ºm sayƒ±sƒ±: ${checkSolutions.size}")

                // Ba≈üarƒ±lƒ± kayƒ±t sonrasƒ± geri d√∂n
                setResult(Activity.RESULT_OK)
                finish()
            } else {
                println("DEBUG: ‚ùå Veritabanƒ±na kayƒ±t ba≈üarƒ±sƒ±z!")
                Toast.makeText(this, "√á√∂z√ºm kaydedilemedi", Toast.LENGTH_SHORT).show()

                // Hata durumunda fotoƒürafƒ± sil
                if (savedImagePath != null) {
                    photoManager.deletePhoto(savedImagePath)
                }
            }

        } catch (e: Exception) {
            println("DEBUG: ‚ùå Kaydetme hatasƒ±: ${e.message}")
            e.printStackTrace()
            Toast.makeText(this, "Hata: ${e.message}", Toast.LENGTH_SHORT).show()
        } finally {
            // Buton durumunu eski haline getir
            binding.btnSaveSolution.isEnabled = true
            binding.btnSaveSolution.text = "√á√∂z√ºm√º Kaydet"
        }
    }

    /**
     * Geri buton basƒ±ldƒ±ƒüƒ±nda
     */
    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        return true
    }
}